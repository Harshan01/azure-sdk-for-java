// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.developer.loadtesting.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Patch;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.util.BinaryData;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.developer.loadtesting.models.ErrorResponseBodyException;
import com.azure.developer.loadtesting.models.FileUrl;
import com.azure.developer.loadtesting.models.FileUrlList;
import com.azure.developer.loadtesting.models.TestModel;
import com.azure.developer.loadtesting.models.TestModelResourceList;
import java.nio.ByteBuffer;
import java.time.OffsetDateTime;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in Tests. */
public final class TestsImpl {
    /** The proxy service used to perform REST calls. */
    private final TestsService service;

    /** The service client containing this operation class. */
    private final AzureLoadTestingImpl client;

    /**
     * Initializes an instance of TestsImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    TestsImpl(AzureLoadTestingImpl client) {
        this.service = RestProxy.create(TestsService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for AzureLoadTestingTests to be used by the proxy service to perform REST
     * calls.
     */
    @Host("https://{Endpoint}")
    @ServiceInterface(name = "AzureLoadTestingTest")
    public interface TestsService {
        @Patch("/loadtests/{testId}")
        @ExpectedResponses({200, 201})
        @UnexpectedResponseExceptionType(ErrorResponseBodyException.class)
        Mono<Response<TestModel>> createOrUpdateTest(
                @HostParam("Endpoint") String endpoint,
                @QueryParam("api-version") String apiVersion,
                @PathParam("testId") String testId,
                @BodyParam("application/merge-patch+json") TestModel body,
                @HeaderParam("Accept") String accept,
                Context context);

        @Delete("/loadtests/{testId}")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(ErrorResponseBodyException.class)
        Mono<Response<Void>> deleteLoadTest(
                @HostParam("Endpoint") String endpoint,
                @QueryParam("api-version") String apiVersion,
                @PathParam("testId") String testId,
                @HeaderParam("Accept") String accept,
                Context context);

        @Get("/loadtests/{testId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorResponseBodyException.class)
        Mono<Response<TestModel>> getLoadTest(
                @HostParam("Endpoint") String endpoint,
                @QueryParam("api-version") String apiVersion,
                @PathParam("testId") String testId,
                @HeaderParam("Accept") String accept,
                Context context);

        @Get("/loadtests/sortAndFilter")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorResponseBodyException.class)
        Mono<Response<TestModelResourceList>> listLoadTestSearch(
                @HostParam("Endpoint") String endpoint,
                @QueryParam("orderBy") String orderBy,
                @QueryParam("search") String search,
                @QueryParam("lastUpdatedStartTime") OffsetDateTime lastUpdatedStartTime,
                @QueryParam("lastUpdatedEndTime") OffsetDateTime lastUpdatedEndTime,
                @QueryParam("continuationToken") String continuationToken,
                @QueryParam("maxPageSize") Integer maxPageSize,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("Accept") String accept,
                Context context);

        // @Multipart not supported by RestProxy
        @Put("/loadtests/{testId}/files/{fileId}")
        @ExpectedResponses({201})
        @UnexpectedResponseExceptionType(ErrorResponseBodyException.class)
        Mono<Response<FileUrl>> uploadTestFile(
                @HostParam("Endpoint") String endpoint,
                @PathParam("testId") String testId,
                @PathParam("fileId") String fileId,
                @QueryParam("fileType") Integer fileType,
                @QueryParam("api-version") String apiVersion,
                @BodyParam("multipart/form-data") Flux<ByteBuffer> file,
                @HeaderParam("Content-Length") long contentLength,
                @HeaderParam("Accept") String accept,
                Context context);

        // @Multipart not supported by RestProxy
        @Put("/loadtests/{testId}/files/{fileId}")
        @ExpectedResponses({201})
        @UnexpectedResponseExceptionType(ErrorResponseBodyException.class)
        Mono<Response<FileUrl>> uploadTestFile(
                @HostParam("Endpoint") String endpoint,
                @PathParam("testId") String testId,
                @PathParam("fileId") String fileId,
                @QueryParam("fileType") Integer fileType,
                @QueryParam("api-version") String apiVersion,
                @BodyParam("multipart/form-data") BinaryData file,
                @HeaderParam("Content-Length") long contentLength,
                @HeaderParam("Accept") String accept,
                Context context);

        @Get("/loadtests/{testId}/files/{fileId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorResponseBodyException.class)
        Mono<Response<FileUrl>> getTestFile(
                @HostParam("Endpoint") String endpoint,
                @PathParam("testId") String testId,
                @PathParam("fileId") String fileId,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("Accept") String accept,
                Context context);

        @Delete("/loadtests/{testId}/files/{fileId}")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(ErrorResponseBodyException.class)
        Mono<Response<Void>> deleteTestFile(
                @HostParam("Endpoint") String endpoint,
                @PathParam("testId") String testId,
                @PathParam("fileId") String fileId,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("Accept") String accept,
                Context context);

        @Get("/loadtests/{testId}/files")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorResponseBodyException.class)
        Mono<Response<FileUrlList>> getAllTestFiles(
                @HostParam("Endpoint") String endpoint,
                @QueryParam("api-version") String apiVersion,
                @PathParam("testId") String testId,
                @QueryParam("continuationToken") String continuationToken,
                @HeaderParam("Accept") String accept,
                Context context);
    }

    /**
     * Create a new test or Update an existing test.
     *
     * @param testId Unique name for load test, must be a valid URL character ^[a-z0-9_-]*$.
     * @param body Load test model.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseBodyException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return load test model along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<TestModel>> createOrUpdateTestWithResponseAsync(String testId, TestModel body) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.createOrUpdateTest(
                                this.client.getEndpoint(), this.client.getApiVersion(), testId, body, accept, context));
    }

    /**
     * Create a new test or Update an existing test.
     *
     * @param testId Unique name for load test, must be a valid URL character ^[a-z0-9_-]*$.
     * @param body Load test model.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseBodyException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return load test model along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<TestModel>> createOrUpdateTestWithResponseAsync(
            String testId, TestModel body, Context context) {
        final String accept = "application/json";
        return service.createOrUpdateTest(
                this.client.getEndpoint(), this.client.getApiVersion(), testId, body, accept, context);
    }

    /**
     * Create a new test or Update an existing test.
     *
     * @param testId Unique name for load test, must be a valid URL character ^[a-z0-9_-]*$.
     * @param body Load test model.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseBodyException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return load test model on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<TestModel> createOrUpdateTestAsync(String testId, TestModel body) {
        return createOrUpdateTestWithResponseAsync(testId, body).flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Create a new test or Update an existing test.
     *
     * @param testId Unique name for load test, must be a valid URL character ^[a-z0-9_-]*$.
     * @param body Load test model.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseBodyException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return load test model on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<TestModel> createOrUpdateTestAsync(String testId, TestModel body, Context context) {
        return createOrUpdateTestWithResponseAsync(testId, body, context)
                .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Create a new test or Update an existing test.
     *
     * @param testId Unique name for load test, must be a valid URL character ^[a-z0-9_-]*$.
     * @param body Load test model.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseBodyException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return load test model.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public TestModel createOrUpdateTest(String testId, TestModel body) {
        return createOrUpdateTestAsync(testId, body).block();
    }

    /**
     * Create a new test or Update an existing test.
     *
     * @param testId Unique name for load test, must be a valid URL character ^[a-z0-9_-]*$.
     * @param body Load test model.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseBodyException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return load test model along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<TestModel> createOrUpdateTestWithResponse(String testId, TestModel body, Context context) {
        return createOrUpdateTestWithResponseAsync(testId, body, context).block();
    }

    /**
     * Delete a test by its name.
     *
     * @param testId Unique name for load test, must be a valid URL character ^[a-z0-9_-]*$.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseBodyException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteLoadTestWithResponseAsync(String testId) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.deleteLoadTest(
                                this.client.getEndpoint(), this.client.getApiVersion(), testId, accept, context));
    }

    /**
     * Delete a test by its name.
     *
     * @param testId Unique name for load test, must be a valid URL character ^[a-z0-9_-]*$.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseBodyException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteLoadTestWithResponseAsync(String testId, Context context) {
        final String accept = "application/json";
        return service.deleteLoadTest(this.client.getEndpoint(), this.client.getApiVersion(), testId, accept, context);
    }

    /**
     * Delete a test by its name.
     *
     * @param testId Unique name for load test, must be a valid URL character ^[a-z0-9_-]*$.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseBodyException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> deleteLoadTestAsync(String testId) {
        return deleteLoadTestWithResponseAsync(testId).flatMap(ignored -> Mono.empty());
    }

    /**
     * Delete a test by its name.
     *
     * @param testId Unique name for load test, must be a valid URL character ^[a-z0-9_-]*$.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseBodyException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> deleteLoadTestAsync(String testId, Context context) {
        return deleteLoadTestWithResponseAsync(testId, context).flatMap(ignored -> Mono.empty());
    }

    /**
     * Delete a test by its name.
     *
     * @param testId Unique name for load test, must be a valid URL character ^[a-z0-9_-]*$.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseBodyException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deleteLoadTest(String testId) {
        deleteLoadTestAsync(testId).block();
    }

    /**
     * Delete a test by its name.
     *
     * @param testId Unique name for load test, must be a valid URL character ^[a-z0-9_-]*$.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseBodyException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteLoadTestWithResponse(String testId, Context context) {
        return deleteLoadTestWithResponseAsync(testId, context).block();
    }

    /**
     * Get load test details by test name.
     *
     * @param testId Unique name for load test, must be a valid URL character ^[a-z0-9_-]*$.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseBodyException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return load test details by test name along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<TestModel>> getLoadTestWithResponseAsync(String testId) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.getLoadTest(
                                this.client.getEndpoint(), this.client.getApiVersion(), testId, accept, context));
    }

    /**
     * Get load test details by test name.
     *
     * @param testId Unique name for load test, must be a valid URL character ^[a-z0-9_-]*$.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseBodyException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return load test details by test name along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<TestModel>> getLoadTestWithResponseAsync(String testId, Context context) {
        final String accept = "application/json";
        return service.getLoadTest(this.client.getEndpoint(), this.client.getApiVersion(), testId, accept, context);
    }

    /**
     * Get load test details by test name.
     *
     * @param testId Unique name for load test, must be a valid URL character ^[a-z0-9_-]*$.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseBodyException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return load test details by test name on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<TestModel> getLoadTestAsync(String testId) {
        return getLoadTestWithResponseAsync(testId).flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Get load test details by test name.
     *
     * @param testId Unique name for load test, must be a valid URL character ^[a-z0-9_-]*$.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseBodyException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return load test details by test name on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<TestModel> getLoadTestAsync(String testId, Context context) {
        return getLoadTestWithResponseAsync(testId, context).flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Get load test details by test name.
     *
     * @param testId Unique name for load test, must be a valid URL character ^[a-z0-9_-]*$.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseBodyException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return load test details by test name.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public TestModel getLoadTest(String testId) {
        return getLoadTestAsync(testId).block();
    }

    /**
     * Get load test details by test name.
     *
     * @param testId Unique name for load test, must be a valid URL character ^[a-z0-9_-]*$.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseBodyException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return load test details by test name along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<TestModel> getLoadTestWithResponse(String testId, Context context) {
        return getLoadTestWithResponseAsync(testId, context).block();
    }

    /**
     * Get all load tests by the fully qualified resource Id e.g
     * subscriptions/{subId}/resourceGroups/{rg}/providers/Microsoft.LoadTestService/loadtests/{resName}.
     *
     * @param orderBy Sort on one of the field - lastModifiedDateTime, displayName, createdBy in (field asc/desc)
     *     format. eg: displayName asc.
     * @param search Filter search based on searchable fields - testId, createdBy.
     * @param lastUpdatedStartTime Start DateTime(ISO 8601 literal format) of the last updated time range to filter
     *     tests.
     * @param lastUpdatedEndTime End DateTime(ISO 8601 literal format) of the last updated time range to filter tests.
     * @param continuationToken Continuation token to get the next page of response.
     * @param maxPageSize Number of results in response.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseBodyException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all load tests by the fully qualified resource Id e.g
     *     subscriptions/{subId}/resourceGroups/{rg}/providers/Microsoft.LoadTestService/loadtests/{resName} along with
     *     {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<TestModelResourceList>> listLoadTestSearchWithResponseAsync(
            String orderBy,
            String search,
            OffsetDateTime lastUpdatedStartTime,
            OffsetDateTime lastUpdatedEndTime,
            String continuationToken,
            Integer maxPageSize) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.listLoadTestSearch(
                                this.client.getEndpoint(),
                                orderBy,
                                search,
                                lastUpdatedStartTime,
                                lastUpdatedEndTime,
                                continuationToken,
                                maxPageSize,
                                this.client.getApiVersion(),
                                accept,
                                context));
    }

    /**
     * Get all load tests by the fully qualified resource Id e.g
     * subscriptions/{subId}/resourceGroups/{rg}/providers/Microsoft.LoadTestService/loadtests/{resName}.
     *
     * @param orderBy Sort on one of the field - lastModifiedDateTime, displayName, createdBy in (field asc/desc)
     *     format. eg: displayName asc.
     * @param search Filter search based on searchable fields - testId, createdBy.
     * @param lastUpdatedStartTime Start DateTime(ISO 8601 literal format) of the last updated time range to filter
     *     tests.
     * @param lastUpdatedEndTime End DateTime(ISO 8601 literal format) of the last updated time range to filter tests.
     * @param continuationToken Continuation token to get the next page of response.
     * @param maxPageSize Number of results in response.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseBodyException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all load tests by the fully qualified resource Id e.g
     *     subscriptions/{subId}/resourceGroups/{rg}/providers/Microsoft.LoadTestService/loadtests/{resName} along with
     *     {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<TestModelResourceList>> listLoadTestSearchWithResponseAsync(
            String orderBy,
            String search,
            OffsetDateTime lastUpdatedStartTime,
            OffsetDateTime lastUpdatedEndTime,
            String continuationToken,
            Integer maxPageSize,
            Context context) {
        final String accept = "application/json";
        return service.listLoadTestSearch(
                this.client.getEndpoint(),
                orderBy,
                search,
                lastUpdatedStartTime,
                lastUpdatedEndTime,
                continuationToken,
                maxPageSize,
                this.client.getApiVersion(),
                accept,
                context);
    }

    /**
     * Get all load tests by the fully qualified resource Id e.g
     * subscriptions/{subId}/resourceGroups/{rg}/providers/Microsoft.LoadTestService/loadtests/{resName}.
     *
     * @param orderBy Sort on one of the field - lastModifiedDateTime, displayName, createdBy in (field asc/desc)
     *     format. eg: displayName asc.
     * @param search Filter search based on searchable fields - testId, createdBy.
     * @param lastUpdatedStartTime Start DateTime(ISO 8601 literal format) of the last updated time range to filter
     *     tests.
     * @param lastUpdatedEndTime End DateTime(ISO 8601 literal format) of the last updated time range to filter tests.
     * @param continuationToken Continuation token to get the next page of response.
     * @param maxPageSize Number of results in response.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseBodyException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all load tests by the fully qualified resource Id e.g
     *     subscriptions/{subId}/resourceGroups/{rg}/providers/Microsoft.LoadTestService/loadtests/{resName} on
     *     successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<TestModelResourceList> listLoadTestSearchAsync(
            String orderBy,
            String search,
            OffsetDateTime lastUpdatedStartTime,
            OffsetDateTime lastUpdatedEndTime,
            String continuationToken,
            Integer maxPageSize) {
        return listLoadTestSearchWithResponseAsync(
                        orderBy, search, lastUpdatedStartTime, lastUpdatedEndTime, continuationToken, maxPageSize)
                .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Get all load tests by the fully qualified resource Id e.g
     * subscriptions/{subId}/resourceGroups/{rg}/providers/Microsoft.LoadTestService/loadtests/{resName}.
     *
     * @param orderBy Sort on one of the field - lastModifiedDateTime, displayName, createdBy in (field asc/desc)
     *     format. eg: displayName asc.
     * @param search Filter search based on searchable fields - testId, createdBy.
     * @param lastUpdatedStartTime Start DateTime(ISO 8601 literal format) of the last updated time range to filter
     *     tests.
     * @param lastUpdatedEndTime End DateTime(ISO 8601 literal format) of the last updated time range to filter tests.
     * @param continuationToken Continuation token to get the next page of response.
     * @param maxPageSize Number of results in response.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseBodyException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all load tests by the fully qualified resource Id e.g
     *     subscriptions/{subId}/resourceGroups/{rg}/providers/Microsoft.LoadTestService/loadtests/{resName} on
     *     successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<TestModelResourceList> listLoadTestSearchAsync(
            String orderBy,
            String search,
            OffsetDateTime lastUpdatedStartTime,
            OffsetDateTime lastUpdatedEndTime,
            String continuationToken,
            Integer maxPageSize,
            Context context) {
        return listLoadTestSearchWithResponseAsync(
                        orderBy,
                        search,
                        lastUpdatedStartTime,
                        lastUpdatedEndTime,
                        continuationToken,
                        maxPageSize,
                        context)
                .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Get all load tests by the fully qualified resource Id e.g
     * subscriptions/{subId}/resourceGroups/{rg}/providers/Microsoft.LoadTestService/loadtests/{resName}.
     *
     * @param orderBy Sort on one of the field - lastModifiedDateTime, displayName, createdBy in (field asc/desc)
     *     format. eg: displayName asc.
     * @param search Filter search based on searchable fields - testId, createdBy.
     * @param lastUpdatedStartTime Start DateTime(ISO 8601 literal format) of the last updated time range to filter
     *     tests.
     * @param lastUpdatedEndTime End DateTime(ISO 8601 literal format) of the last updated time range to filter tests.
     * @param continuationToken Continuation token to get the next page of response.
     * @param maxPageSize Number of results in response.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseBodyException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all load tests by the fully qualified resource Id e.g
     *     subscriptions/{subId}/resourceGroups/{rg}/providers/Microsoft.LoadTestService/loadtests/{resName}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public TestModelResourceList listLoadTestSearch(
            String orderBy,
            String search,
            OffsetDateTime lastUpdatedStartTime,
            OffsetDateTime lastUpdatedEndTime,
            String continuationToken,
            Integer maxPageSize) {
        return listLoadTestSearchAsync(
                        orderBy, search, lastUpdatedStartTime, lastUpdatedEndTime, continuationToken, maxPageSize)
                .block();
    }

    /**
     * Get all load tests by the fully qualified resource Id e.g
     * subscriptions/{subId}/resourceGroups/{rg}/providers/Microsoft.LoadTestService/loadtests/{resName}.
     *
     * @param orderBy Sort on one of the field - lastModifiedDateTime, displayName, createdBy in (field asc/desc)
     *     format. eg: displayName asc.
     * @param search Filter search based on searchable fields - testId, createdBy.
     * @param lastUpdatedStartTime Start DateTime(ISO 8601 literal format) of the last updated time range to filter
     *     tests.
     * @param lastUpdatedEndTime End DateTime(ISO 8601 literal format) of the last updated time range to filter tests.
     * @param continuationToken Continuation token to get the next page of response.
     * @param maxPageSize Number of results in response.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseBodyException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all load tests by the fully qualified resource Id e.g
     *     subscriptions/{subId}/resourceGroups/{rg}/providers/Microsoft.LoadTestService/loadtests/{resName} along with
     *     {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<TestModelResourceList> listLoadTestSearchWithResponse(
            String orderBy,
            String search,
            OffsetDateTime lastUpdatedStartTime,
            OffsetDateTime lastUpdatedEndTime,
            String continuationToken,
            Integer maxPageSize,
            Context context) {
        return listLoadTestSearchWithResponseAsync(
                        orderBy,
                        search,
                        lastUpdatedStartTime,
                        lastUpdatedEndTime,
                        continuationToken,
                        maxPageSize,
                        context)
                .block();
    }

    /**
     * Upload input file for a given test name. File size can't be more than 50 MB. Existing file with same name for the
     * given test will be overwritten. File should be provided in the request body as multipart/form-data.
     *
     * @param testId Unique name for load test, must be a valid URL character ^[a-z0-9_-]*$.
     * @param fileId Unique identifier for test file, must be a valid URL character ^[a-z0-9_-]*$.
     * @param file The file to be uploaded.
     * @param contentLength The Content-Length header for the request.
     * @param fileType Integer representation of the file type (0 = JMX_FILE, 1 = USER_PROPERTIES, 2 =
     *     ADDITIONAL_ARTIFACTS).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseBodyException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return fileUrl Model along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<FileUrl>> uploadTestFileWithResponseAsync(
            String testId, String fileId, Flux<ByteBuffer> file, long contentLength, Integer fileType) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.uploadTestFile(
                                this.client.getEndpoint(),
                                testId,
                                fileId,
                                fileType,
                                this.client.getApiVersion(),
                                file,
                                contentLength,
                                accept,
                                context));
    }

    /**
     * Upload input file for a given test name. File size can't be more than 50 MB. Existing file with same name for the
     * given test will be overwritten. File should be provided in the request body as multipart/form-data.
     *
     * @param testId Unique name for load test, must be a valid URL character ^[a-z0-9_-]*$.
     * @param fileId Unique identifier for test file, must be a valid URL character ^[a-z0-9_-]*$.
     * @param file The file to be uploaded.
     * @param contentLength The Content-Length header for the request.
     * @param fileType Integer representation of the file type (0 = JMX_FILE, 1 = USER_PROPERTIES, 2 =
     *     ADDITIONAL_ARTIFACTS).
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseBodyException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return fileUrl Model along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<FileUrl>> uploadTestFileWithResponseAsync(
            String testId,
            String fileId,
            Flux<ByteBuffer> file,
            long contentLength,
            Integer fileType,
            Context context) {
        final String accept = "application/json";
        return service.uploadTestFile(
                this.client.getEndpoint(),
                testId,
                fileId,
                fileType,
                this.client.getApiVersion(),
                file,
                contentLength,
                accept,
                context);
    }

    /**
     * Upload input file for a given test name. File size can't be more than 50 MB. Existing file with same name for the
     * given test will be overwritten. File should be provided in the request body as multipart/form-data.
     *
     * @param testId Unique name for load test, must be a valid URL character ^[a-z0-9_-]*$.
     * @param fileId Unique identifier for test file, must be a valid URL character ^[a-z0-9_-]*$.
     * @param file The file to be uploaded.
     * @param contentLength The Content-Length header for the request.
     * @param fileType Integer representation of the file type (0 = JMX_FILE, 1 = USER_PROPERTIES, 2 =
     *     ADDITIONAL_ARTIFACTS).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseBodyException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return fileUrl Model on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<FileUrl> uploadTestFileAsync(
            String testId, String fileId, Flux<ByteBuffer> file, long contentLength, Integer fileType) {
        return uploadTestFileWithResponseAsync(testId, fileId, file, contentLength, fileType)
                .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Upload input file for a given test name. File size can't be more than 50 MB. Existing file with same name for the
     * given test will be overwritten. File should be provided in the request body as multipart/form-data.
     *
     * @param testId Unique name for load test, must be a valid URL character ^[a-z0-9_-]*$.
     * @param fileId Unique identifier for test file, must be a valid URL character ^[a-z0-9_-]*$.
     * @param file The file to be uploaded.
     * @param contentLength The Content-Length header for the request.
     * @param fileType Integer representation of the file type (0 = JMX_FILE, 1 = USER_PROPERTIES, 2 =
     *     ADDITIONAL_ARTIFACTS).
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseBodyException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return fileUrl Model on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<FileUrl> uploadTestFileAsync(
            String testId,
            String fileId,
            Flux<ByteBuffer> file,
            long contentLength,
            Integer fileType,
            Context context) {
        return uploadTestFileWithResponseAsync(testId, fileId, file, contentLength, fileType, context)
                .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Upload input file for a given test name. File size can't be more than 50 MB. Existing file with same name for the
     * given test will be overwritten. File should be provided in the request body as multipart/form-data.
     *
     * @param testId Unique name for load test, must be a valid URL character ^[a-z0-9_-]*$.
     * @param fileId Unique identifier for test file, must be a valid URL character ^[a-z0-9_-]*$.
     * @param file The file to be uploaded.
     * @param contentLength The Content-Length header for the request.
     * @param fileType Integer representation of the file type (0 = JMX_FILE, 1 = USER_PROPERTIES, 2 =
     *     ADDITIONAL_ARTIFACTS).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseBodyException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return fileUrl Model.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public FileUrl uploadTestFile(
            String testId, String fileId, Flux<ByteBuffer> file, long contentLength, Integer fileType) {
        return uploadTestFileAsync(testId, fileId, file, contentLength, fileType).block();
    }

    /**
     * Upload input file for a given test name. File size can't be more than 50 MB. Existing file with same name for the
     * given test will be overwritten. File should be provided in the request body as multipart/form-data.
     *
     * @param testId Unique name for load test, must be a valid URL character ^[a-z0-9_-]*$.
     * @param fileId Unique identifier for test file, must be a valid URL character ^[a-z0-9_-]*$.
     * @param file The file to be uploaded.
     * @param contentLength The Content-Length header for the request.
     * @param fileType Integer representation of the file type (0 = JMX_FILE, 1 = USER_PROPERTIES, 2 =
     *     ADDITIONAL_ARTIFACTS).
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseBodyException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return fileUrl Model along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<FileUrl> uploadTestFileWithResponse(
            String testId,
            String fileId,
            Flux<ByteBuffer> file,
            long contentLength,
            Integer fileType,
            Context context) {
        return uploadTestFileWithResponseAsync(testId, fileId, file, contentLength, fileType, context).block();
    }

    /**
     * Upload input file for a given test name. File size can't be more than 50 MB. Existing file with same name for the
     * given test will be overwritten. File should be provided in the request body as multipart/form-data.
     *
     * @param testId Unique name for load test, must be a valid URL character ^[a-z0-9_-]*$.
     * @param fileId Unique identifier for test file, must be a valid URL character ^[a-z0-9_-]*$.
     * @param file The file to be uploaded.
     * @param contentLength The Content-Length header for the request.
     * @param fileType Integer representation of the file type (0 = JMX_FILE, 1 = USER_PROPERTIES, 2 =
     *     ADDITIONAL_ARTIFACTS).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseBodyException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return fileUrl Model along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<FileUrl>> uploadTestFileWithResponseAsync(
            String testId, String fileId, BinaryData file, long contentLength, Integer fileType) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.uploadTestFile(
                                this.client.getEndpoint(),
                                testId,
                                fileId,
                                fileType,
                                this.client.getApiVersion(),
                                file,
                                contentLength,
                                accept,
                                context));
    }

    /**
     * Upload input file for a given test name. File size can't be more than 50 MB. Existing file with same name for the
     * given test will be overwritten. File should be provided in the request body as multipart/form-data.
     *
     * @param testId Unique name for load test, must be a valid URL character ^[a-z0-9_-]*$.
     * @param fileId Unique identifier for test file, must be a valid URL character ^[a-z0-9_-]*$.
     * @param file The file to be uploaded.
     * @param contentLength The Content-Length header for the request.
     * @param fileType Integer representation of the file type (0 = JMX_FILE, 1 = USER_PROPERTIES, 2 =
     *     ADDITIONAL_ARTIFACTS).
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseBodyException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return fileUrl Model along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<FileUrl>> uploadTestFileWithResponseAsync(
            String testId, String fileId, BinaryData file, long contentLength, Integer fileType, Context context) {
        final String accept = "application/json";
        return service.uploadTestFile(
                this.client.getEndpoint(),
                testId,
                fileId,
                fileType,
                this.client.getApiVersion(),
                file,
                contentLength,
                accept,
                context);
    }

    /**
     * Upload input file for a given test name. File size can't be more than 50 MB. Existing file with same name for the
     * given test will be overwritten. File should be provided in the request body as multipart/form-data.
     *
     * @param testId Unique name for load test, must be a valid URL character ^[a-z0-9_-]*$.
     * @param fileId Unique identifier for test file, must be a valid URL character ^[a-z0-9_-]*$.
     * @param file The file to be uploaded.
     * @param contentLength The Content-Length header for the request.
     * @param fileType Integer representation of the file type (0 = JMX_FILE, 1 = USER_PROPERTIES, 2 =
     *     ADDITIONAL_ARTIFACTS).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseBodyException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return fileUrl Model on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<FileUrl> uploadTestFileAsync(
            String testId, String fileId, BinaryData file, long contentLength, Integer fileType) {
        return uploadTestFileWithResponseAsync(testId, fileId, file, contentLength, fileType)
                .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Upload input file for a given test name. File size can't be more than 50 MB. Existing file with same name for the
     * given test will be overwritten. File should be provided in the request body as multipart/form-data.
     *
     * @param testId Unique name for load test, must be a valid URL character ^[a-z0-9_-]*$.
     * @param fileId Unique identifier for test file, must be a valid URL character ^[a-z0-9_-]*$.
     * @param file The file to be uploaded.
     * @param contentLength The Content-Length header for the request.
     * @param fileType Integer representation of the file type (0 = JMX_FILE, 1 = USER_PROPERTIES, 2 =
     *     ADDITIONAL_ARTIFACTS).
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseBodyException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return fileUrl Model on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<FileUrl> uploadTestFileAsync(
            String testId, String fileId, BinaryData file, long contentLength, Integer fileType, Context context) {
        return uploadTestFileWithResponseAsync(testId, fileId, file, contentLength, fileType, context)
                .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Upload input file for a given test name. File size can't be more than 50 MB. Existing file with same name for the
     * given test will be overwritten. File should be provided in the request body as multipart/form-data.
     *
     * @param testId Unique name for load test, must be a valid URL character ^[a-z0-9_-]*$.
     * @param fileId Unique identifier for test file, must be a valid URL character ^[a-z0-9_-]*$.
     * @param file The file to be uploaded.
     * @param contentLength The Content-Length header for the request.
     * @param fileType Integer representation of the file type (0 = JMX_FILE, 1 = USER_PROPERTIES, 2 =
     *     ADDITIONAL_ARTIFACTS).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseBodyException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return fileUrl Model.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public FileUrl uploadTestFile(String testId, String fileId, BinaryData file, long contentLength, Integer fileType) {
        return uploadTestFileAsync(testId, fileId, file, contentLength, fileType).block();
    }

    /**
     * Upload input file for a given test name. File size can't be more than 50 MB. Existing file with same name for the
     * given test will be overwritten. File should be provided in the request body as multipart/form-data.
     *
     * @param testId Unique name for load test, must be a valid URL character ^[a-z0-9_-]*$.
     * @param fileId Unique identifier for test file, must be a valid URL character ^[a-z0-9_-]*$.
     * @param file The file to be uploaded.
     * @param contentLength The Content-Length header for the request.
     * @param fileType Integer representation of the file type (0 = JMX_FILE, 1 = USER_PROPERTIES, 2 =
     *     ADDITIONAL_ARTIFACTS).
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseBodyException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return fileUrl Model along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<FileUrl> uploadTestFileWithResponse(
            String testId, String fileId, BinaryData file, long contentLength, Integer fileType, Context context) {
        return uploadTestFileWithResponseAsync(testId, fileId, file, contentLength, fileType, context).block();
    }

    /**
     * Get test file by the file name.
     *
     * @param testId Unique name for load test, must be a valid URL character ^[a-z0-9_-]*$.
     * @param fileId Unique identifier for test file, must be a valid URL character ^[a-z0-9_-]*$.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseBodyException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return test file by the file name along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<FileUrl>> getTestFileWithResponseAsync(String testId, String fileId) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.getTestFile(
                                this.client.getEndpoint(),
                                testId,
                                fileId,
                                this.client.getApiVersion(),
                                accept,
                                context));
    }

    /**
     * Get test file by the file name.
     *
     * @param testId Unique name for load test, must be a valid URL character ^[a-z0-9_-]*$.
     * @param fileId Unique identifier for test file, must be a valid URL character ^[a-z0-9_-]*$.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseBodyException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return test file by the file name along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<FileUrl>> getTestFileWithResponseAsync(String testId, String fileId, Context context) {
        final String accept = "application/json";
        return service.getTestFile(
                this.client.getEndpoint(), testId, fileId, this.client.getApiVersion(), accept, context);
    }

    /**
     * Get test file by the file name.
     *
     * @param testId Unique name for load test, must be a valid URL character ^[a-z0-9_-]*$.
     * @param fileId Unique identifier for test file, must be a valid URL character ^[a-z0-9_-]*$.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseBodyException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return test file by the file name on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<FileUrl> getTestFileAsync(String testId, String fileId) {
        return getTestFileWithResponseAsync(testId, fileId).flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Get test file by the file name.
     *
     * @param testId Unique name for load test, must be a valid URL character ^[a-z0-9_-]*$.
     * @param fileId Unique identifier for test file, must be a valid URL character ^[a-z0-9_-]*$.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseBodyException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return test file by the file name on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<FileUrl> getTestFileAsync(String testId, String fileId, Context context) {
        return getTestFileWithResponseAsync(testId, fileId, context).flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Get test file by the file name.
     *
     * @param testId Unique name for load test, must be a valid URL character ^[a-z0-9_-]*$.
     * @param fileId Unique identifier for test file, must be a valid URL character ^[a-z0-9_-]*$.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseBodyException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return test file by the file name.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public FileUrl getTestFile(String testId, String fileId) {
        return getTestFileAsync(testId, fileId).block();
    }

    /**
     * Get test file by the file name.
     *
     * @param testId Unique name for load test, must be a valid URL character ^[a-z0-9_-]*$.
     * @param fileId Unique identifier for test file, must be a valid URL character ^[a-z0-9_-]*$.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseBodyException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return test file by the file name along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<FileUrl> getTestFileWithResponse(String testId, String fileId, Context context) {
        return getTestFileWithResponseAsync(testId, fileId, context).block();
    }

    /**
     * Delete file by the file name for a test.
     *
     * @param testId Unique name for load test, must be a valid URL character ^[a-z0-9_-]*$.
     * @param fileId Unique identifier for test file, must be a valid URL character ^[a-z0-9_-]*$.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseBodyException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteTestFileWithResponseAsync(String testId, String fileId) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.deleteTestFile(
                                this.client.getEndpoint(),
                                testId,
                                fileId,
                                this.client.getApiVersion(),
                                accept,
                                context));
    }

    /**
     * Delete file by the file name for a test.
     *
     * @param testId Unique name for load test, must be a valid URL character ^[a-z0-9_-]*$.
     * @param fileId Unique identifier for test file, must be a valid URL character ^[a-z0-9_-]*$.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseBodyException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteTestFileWithResponseAsync(String testId, String fileId, Context context) {
        final String accept = "application/json";
        return service.deleteTestFile(
                this.client.getEndpoint(), testId, fileId, this.client.getApiVersion(), accept, context);
    }

    /**
     * Delete file by the file name for a test.
     *
     * @param testId Unique name for load test, must be a valid URL character ^[a-z0-9_-]*$.
     * @param fileId Unique identifier for test file, must be a valid URL character ^[a-z0-9_-]*$.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseBodyException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> deleteTestFileAsync(String testId, String fileId) {
        return deleteTestFileWithResponseAsync(testId, fileId).flatMap(ignored -> Mono.empty());
    }

    /**
     * Delete file by the file name for a test.
     *
     * @param testId Unique name for load test, must be a valid URL character ^[a-z0-9_-]*$.
     * @param fileId Unique identifier for test file, must be a valid URL character ^[a-z0-9_-]*$.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseBodyException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> deleteTestFileAsync(String testId, String fileId, Context context) {
        return deleteTestFileWithResponseAsync(testId, fileId, context).flatMap(ignored -> Mono.empty());
    }

    /**
     * Delete file by the file name for a test.
     *
     * @param testId Unique name for load test, must be a valid URL character ^[a-z0-9_-]*$.
     * @param fileId Unique identifier for test file, must be a valid URL character ^[a-z0-9_-]*$.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseBodyException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deleteTestFile(String testId, String fileId) {
        deleteTestFileAsync(testId, fileId).block();
    }

    /**
     * Delete file by the file name for a test.
     *
     * @param testId Unique name for load test, must be a valid URL character ^[a-z0-9_-]*$.
     * @param fileId Unique identifier for test file, must be a valid URL character ^[a-z0-9_-]*$.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseBodyException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteTestFileWithResponse(String testId, String fileId, Context context) {
        return deleteTestFileWithResponseAsync(testId, fileId, context).block();
    }

    /**
     * Get all test files.
     *
     * @param testId Unique name for load test, must be a valid URL character ^[a-z0-9_-]*$.
     * @param continuationToken Continuation token to get the next page of response.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseBodyException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all test files along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<FileUrlList>> getAllTestFilesWithResponseAsync(String testId, String continuationToken) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.getAllTestFiles(
                                this.client.getEndpoint(),
                                this.client.getApiVersion(),
                                testId,
                                continuationToken,
                                accept,
                                context));
    }

    /**
     * Get all test files.
     *
     * @param testId Unique name for load test, must be a valid URL character ^[a-z0-9_-]*$.
     * @param continuationToken Continuation token to get the next page of response.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseBodyException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all test files along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<FileUrlList>> getAllTestFilesWithResponseAsync(
            String testId, String continuationToken, Context context) {
        final String accept = "application/json";
        return service.getAllTestFiles(
                this.client.getEndpoint(), this.client.getApiVersion(), testId, continuationToken, accept, context);
    }

    /**
     * Get all test files.
     *
     * @param testId Unique name for load test, must be a valid URL character ^[a-z0-9_-]*$.
     * @param continuationToken Continuation token to get the next page of response.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseBodyException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all test files on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<FileUrlList> getAllTestFilesAsync(String testId, String continuationToken) {
        return getAllTestFilesWithResponseAsync(testId, continuationToken)
                .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Get all test files.
     *
     * @param testId Unique name for load test, must be a valid URL character ^[a-z0-9_-]*$.
     * @param continuationToken Continuation token to get the next page of response.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseBodyException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all test files on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<FileUrlList> getAllTestFilesAsync(String testId, String continuationToken, Context context) {
        return getAllTestFilesWithResponseAsync(testId, continuationToken, context)
                .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Get all test files.
     *
     * @param testId Unique name for load test, must be a valid URL character ^[a-z0-9_-]*$.
     * @param continuationToken Continuation token to get the next page of response.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseBodyException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all test files.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public FileUrlList getAllTestFiles(String testId, String continuationToken) {
        return getAllTestFilesAsync(testId, continuationToken).block();
    }

    /**
     * Get all test files.
     *
     * @param testId Unique name for load test, must be a valid URL character ^[a-z0-9_-]*$.
     * @param continuationToken Continuation token to get the next page of response.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseBodyException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all test files along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<FileUrlList> getAllTestFilesWithResponse(String testId, String continuationToken, Context context) {
        return getAllTestFilesWithResponseAsync(testId, continuationToken, context).block();
    }
}
