// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.developer.loadtesting.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Patch;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.developer.loadtesting.models.ClientMetricsFilters;
import com.azure.developer.loadtesting.models.ClientMetricsRequestModel;
import com.azure.developer.loadtesting.models.ClientMetricsResults;
import com.azure.developer.loadtesting.models.ErrorResponseBodyException;
import com.azure.developer.loadtesting.models.FileUrl;
import com.azure.developer.loadtesting.models.TestRunModel;
import com.azure.developer.loadtesting.models.TestRunModelResourceList;
import java.time.OffsetDateTime;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in TestRuns. */
public final class TestRunsImpl {
    /** The proxy service used to perform REST calls. */
    private final TestRunsService service;

    /** The service client containing this operation class. */
    private final AzureLoadTestingImpl client;

    /**
     * Initializes an instance of TestRunsImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    TestRunsImpl(AzureLoadTestingImpl client) {
        this.service = RestProxy.create(TestRunsService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for AzureLoadTestingTestRuns to be used by the proxy service to perform
     * REST calls.
     */
    @Host("https://{Endpoint}")
    @ServiceInterface(name = "AzureLoadTestingTest")
    public interface TestRunsService {
        @Delete("/testruns/{testRunId}")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(ErrorResponseBodyException.class)
        Mono<Response<Void>> deleteTestRun(
                @HostParam("Endpoint") String endpoint,
                @PathParam("testRunId") String testRunId,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("Accept") String accept,
                Context context);

        @Patch("/testruns/{testRunId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorResponseBodyException.class)
        Mono<Response<TestRunModel>> createAndUpdateTest(
                @HostParam("Endpoint") String endpoint,
                @PathParam("testRunId") String testRunId,
                @QueryParam("oldTestRunId") String oldTestRunId,
                @QueryParam("api-version") String apiVersion,
                @BodyParam("application/merge-patch+json") TestRunModel body,
                @HeaderParam("Accept") String accept,
                Context context);

        @Get("/testruns/{testRunId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorResponseBodyException.class)
        Mono<Response<TestRunModel>> getTestRun(
                @HostParam("Endpoint") String endpoint,
                @PathParam("testRunId") String testRunId,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("Accept") String accept,
                Context context);

        @Get("/testruns/{testRunId}/files/{fileId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorResponseBodyException.class)
        Mono<Response<FileUrl>> getTestRunFile(
                @HostParam("Endpoint") String endpoint,
                @PathParam("testRunId") String testRunId,
                @PathParam("fileId") String fileId,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("Accept") String accept,
                Context context);

        @Get("/testruns/sortAndFilter")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorResponseBodyException.class)
        Mono<Response<TestRunModelResourceList>> listTestRunsSearch(
                @HostParam("Endpoint") String endpoint,
                @QueryParam("orderBy") String orderBy,
                @QueryParam("continuationToken") String continuationToken,
                @QueryParam("search") String search,
                @QueryParam("executionFrom") OffsetDateTime executionFrom,
                @QueryParam("executionTo") OffsetDateTime executionTo,
                @QueryParam("status") String status,
                @QueryParam("maxPageSize") Integer maxPageSize,
                @QueryParam("api-version") String apiVersion,
                @QueryParam("testId") String testId,
                @HeaderParam("Accept") String accept,
                Context context);

        @Post("/testruns/{testRunId}:stop")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorResponseBodyException.class)
        Mono<Response<TestRunModel>> stopTestRun(
                @HostParam("Endpoint") String endpoint,
                @PathParam("testRunId") String testRunId,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("Accept") String accept,
                Context context);

        @Post("/testruns/{testRunId}/clientMetrics")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorResponseBodyException.class)
        Mono<Response<ClientMetricsResults>> getTestRunClientMetrics(
                @HostParam("Endpoint") String endpoint,
                @PathParam("testRunId") String testRunId,
                @QueryParam("api-version") String apiVersion,
                @BodyParam("application/json") ClientMetricsRequestModel body,
                @HeaderParam("Accept") String accept,
                Context context);

        @Get("/testruns/{testRunId}/clientMetricsFilters")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorResponseBodyException.class)
        Mono<Response<ClientMetricsFilters>> getTestRunClientMetricsFilters(
                @HostParam("Endpoint") String endpoint,
                @PathParam("testRunId") String testRunId,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("Accept") String accept,
                Context context);
    }

    /**
     * Delete a test run by its name.
     *
     * @param testRunId Unique name of the load test run, must be a valid URL character ^[a-z0-9_-]*$.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseBodyException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteTestRunWithResponseAsync(String testRunId) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.deleteTestRun(
                                this.client.getEndpoint(), testRunId, this.client.getApiVersion(), accept, context));
    }

    /**
     * Delete a test run by its name.
     *
     * @param testRunId Unique name of the load test run, must be a valid URL character ^[a-z0-9_-]*$.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseBodyException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteTestRunWithResponseAsync(String testRunId, Context context) {
        final String accept = "application/json";
        return service.deleteTestRun(
                this.client.getEndpoint(), testRunId, this.client.getApiVersion(), accept, context);
    }

    /**
     * Delete a test run by its name.
     *
     * @param testRunId Unique name of the load test run, must be a valid URL character ^[a-z0-9_-]*$.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseBodyException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> deleteTestRunAsync(String testRunId) {
        return deleteTestRunWithResponseAsync(testRunId).flatMap(ignored -> Mono.empty());
    }

    /**
     * Delete a test run by its name.
     *
     * @param testRunId Unique name of the load test run, must be a valid URL character ^[a-z0-9_-]*$.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseBodyException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> deleteTestRunAsync(String testRunId, Context context) {
        return deleteTestRunWithResponseAsync(testRunId, context).flatMap(ignored -> Mono.empty());
    }

    /**
     * Delete a test run by its name.
     *
     * @param testRunId Unique name of the load test run, must be a valid URL character ^[a-z0-9_-]*$.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseBodyException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deleteTestRun(String testRunId) {
        deleteTestRunAsync(testRunId).block();
    }

    /**
     * Delete a test run by its name.
     *
     * @param testRunId Unique name of the load test run, must be a valid URL character ^[a-z0-9_-]*$.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseBodyException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteTestRunWithResponse(String testRunId, Context context) {
        return deleteTestRunWithResponseAsync(testRunId, context).block();
    }

    /**
     * Create and start a new test run with the given name.
     *
     * @param testRunId Unique name of the load test run, must be a valid URL character ^[a-z0-9_-]*$.
     * @param body Load test run model.
     * @param oldTestRunId Existing test run Id that should be rerun.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseBodyException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return load test run model along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<TestRunModel>> createAndUpdateTestWithResponseAsync(
            String testRunId, TestRunModel body, String oldTestRunId) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.createAndUpdateTest(
                                this.client.getEndpoint(),
                                testRunId,
                                oldTestRunId,
                                this.client.getApiVersion(),
                                body,
                                accept,
                                context));
    }

    /**
     * Create and start a new test run with the given name.
     *
     * @param testRunId Unique name of the load test run, must be a valid URL character ^[a-z0-9_-]*$.
     * @param body Load test run model.
     * @param oldTestRunId Existing test run Id that should be rerun.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseBodyException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return load test run model along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<TestRunModel>> createAndUpdateTestWithResponseAsync(
            String testRunId, TestRunModel body, String oldTestRunId, Context context) {
        final String accept = "application/json";
        return service.createAndUpdateTest(
                this.client.getEndpoint(), testRunId, oldTestRunId, this.client.getApiVersion(), body, accept, context);
    }

    /**
     * Create and start a new test run with the given name.
     *
     * @param testRunId Unique name of the load test run, must be a valid URL character ^[a-z0-9_-]*$.
     * @param body Load test run model.
     * @param oldTestRunId Existing test run Id that should be rerun.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseBodyException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return load test run model on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<TestRunModel> createAndUpdateTestAsync(String testRunId, TestRunModel body, String oldTestRunId) {
        return createAndUpdateTestWithResponseAsync(testRunId, body, oldTestRunId)
                .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Create and start a new test run with the given name.
     *
     * @param testRunId Unique name of the load test run, must be a valid URL character ^[a-z0-9_-]*$.
     * @param body Load test run model.
     * @param oldTestRunId Existing test run Id that should be rerun.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseBodyException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return load test run model on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<TestRunModel> createAndUpdateTestAsync(
            String testRunId, TestRunModel body, String oldTestRunId, Context context) {
        return createAndUpdateTestWithResponseAsync(testRunId, body, oldTestRunId, context)
                .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Create and start a new test run with the given name.
     *
     * @param testRunId Unique name of the load test run, must be a valid URL character ^[a-z0-9_-]*$.
     * @param body Load test run model.
     * @param oldTestRunId Existing test run Id that should be rerun.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseBodyException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return load test run model.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public TestRunModel createAndUpdateTest(String testRunId, TestRunModel body, String oldTestRunId) {
        return createAndUpdateTestAsync(testRunId, body, oldTestRunId).block();
    }

    /**
     * Create and start a new test run with the given name.
     *
     * @param testRunId Unique name of the load test run, must be a valid URL character ^[a-z0-9_-]*$.
     * @param body Load test run model.
     * @param oldTestRunId Existing test run Id that should be rerun.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseBodyException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return load test run model along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<TestRunModel> createAndUpdateTestWithResponse(
            String testRunId, TestRunModel body, String oldTestRunId, Context context) {
        return createAndUpdateTestWithResponseAsync(testRunId, body, oldTestRunId, context).block();
    }

    /**
     * Get test run details by name.
     *
     * @param testRunId Unique name of load test run, must be a valid URL character ^[a-z0-9_-]*$.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseBodyException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return test run details by name along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<TestRunModel>> getTestRunWithResponseAsync(String testRunId) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.getTestRun(
                                this.client.getEndpoint(), testRunId, this.client.getApiVersion(), accept, context));
    }

    /**
     * Get test run details by name.
     *
     * @param testRunId Unique name of load test run, must be a valid URL character ^[a-z0-9_-]*$.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseBodyException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return test run details by name along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<TestRunModel>> getTestRunWithResponseAsync(String testRunId, Context context) {
        final String accept = "application/json";
        return service.getTestRun(this.client.getEndpoint(), testRunId, this.client.getApiVersion(), accept, context);
    }

    /**
     * Get test run details by name.
     *
     * @param testRunId Unique name of load test run, must be a valid URL character ^[a-z0-9_-]*$.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseBodyException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return test run details by name on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<TestRunModel> getTestRunAsync(String testRunId) {
        return getTestRunWithResponseAsync(testRunId).flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Get test run details by name.
     *
     * @param testRunId Unique name of load test run, must be a valid URL character ^[a-z0-9_-]*$.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseBodyException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return test run details by name on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<TestRunModel> getTestRunAsync(String testRunId, Context context) {
        return getTestRunWithResponseAsync(testRunId, context).flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Get test run details by name.
     *
     * @param testRunId Unique name of load test run, must be a valid URL character ^[a-z0-9_-]*$.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseBodyException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return test run details by name.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public TestRunModel getTestRun(String testRunId) {
        return getTestRunAsync(testRunId).block();
    }

    /**
     * Get test run details by name.
     *
     * @param testRunId Unique name of load test run, must be a valid URL character ^[a-z0-9_-]*$.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseBodyException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return test run details by name along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<TestRunModel> getTestRunWithResponse(String testRunId, Context context) {
        return getTestRunWithResponseAsync(testRunId, context).block();
    }

    /**
     * Get test run file by file name.
     *
     * @param testRunId Unique name of load test run, must be a valid URL character ^[a-z0-9_-]*$.
     * @param fileId Unique identifier for test run file, must be a valid URL character ^[a-z0-9_-]*$.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseBodyException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return test run file by file name along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<FileUrl>> getTestRunFileWithResponseAsync(String testRunId, String fileId) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.getTestRunFile(
                                this.client.getEndpoint(),
                                testRunId,
                                fileId,
                                this.client.getApiVersion(),
                                accept,
                                context));
    }

    /**
     * Get test run file by file name.
     *
     * @param testRunId Unique name of load test run, must be a valid URL character ^[a-z0-9_-]*$.
     * @param fileId Unique identifier for test run file, must be a valid URL character ^[a-z0-9_-]*$.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseBodyException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return test run file by file name along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<FileUrl>> getTestRunFileWithResponseAsync(String testRunId, String fileId, Context context) {
        final String accept = "application/json";
        return service.getTestRunFile(
                this.client.getEndpoint(), testRunId, fileId, this.client.getApiVersion(), accept, context);
    }

    /**
     * Get test run file by file name.
     *
     * @param testRunId Unique name of load test run, must be a valid URL character ^[a-z0-9_-]*$.
     * @param fileId Unique identifier for test run file, must be a valid URL character ^[a-z0-9_-]*$.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseBodyException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return test run file by file name on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<FileUrl> getTestRunFileAsync(String testRunId, String fileId) {
        return getTestRunFileWithResponseAsync(testRunId, fileId).flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Get test run file by file name.
     *
     * @param testRunId Unique name of load test run, must be a valid URL character ^[a-z0-9_-]*$.
     * @param fileId Unique identifier for test run file, must be a valid URL character ^[a-z0-9_-]*$.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseBodyException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return test run file by file name on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<FileUrl> getTestRunFileAsync(String testRunId, String fileId, Context context) {
        return getTestRunFileWithResponseAsync(testRunId, fileId, context)
                .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Get test run file by file name.
     *
     * @param testRunId Unique name of load test run, must be a valid URL character ^[a-z0-9_-]*$.
     * @param fileId Unique identifier for test run file, must be a valid URL character ^[a-z0-9_-]*$.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseBodyException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return test run file by file name.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public FileUrl getTestRunFile(String testRunId, String fileId) {
        return getTestRunFileAsync(testRunId, fileId).block();
    }

    /**
     * Get test run file by file name.
     *
     * @param testRunId Unique name of load test run, must be a valid URL character ^[a-z0-9_-]*$.
     * @param fileId Unique identifier for test run file, must be a valid URL character ^[a-z0-9_-]*$.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseBodyException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return test run file by file name along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<FileUrl> getTestRunFileWithResponse(String testRunId, String fileId, Context context) {
        return getTestRunFileWithResponseAsync(testRunId, fileId, context).block();
    }

    /**
     * Get all test runs with given filters.
     *
     * @param orderBy Sort on one of the field - status, displayName, executedDateTime in (field asc/desc) format. eg:
     *     displayName asc.
     * @param continuationToken Continuation token to get the next page of response.
     * @param search Filter search based on searchable fields - description, executedUser.
     * @param executionFrom The end DateTime(ISO 8601 literal format) of test-run execution time filter range.
     * @param executionTo The start DateTime(ISO 8601 literal format) of test-run execution time filter range.
     * @param status Comma separated list of test run status, value can be - "ACCEPTED",
     *     "NOTSTARTED","PROVISIONING","PROVISIONED","CONFIGURING",
     *     "CONFIGURED","EXECUTING","EXECUTED","DEPROVISIONING","DEPROVISIONED","DONE","CANCELLED","FAILED".
     * @param maxPageSize Number of results in response.
     * @param testId Unique name for load test, must be a valid URL character ^[a-z0-9_-]*$.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseBodyException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all test runs with given filters along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<TestRunModelResourceList>> listTestRunsSearchWithResponseAsync(
            String orderBy,
            String continuationToken,
            String search,
            OffsetDateTime executionFrom,
            OffsetDateTime executionTo,
            String status,
            Integer maxPageSize,
            String testId) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.listTestRunsSearch(
                                this.client.getEndpoint(),
                                orderBy,
                                continuationToken,
                                search,
                                executionFrom,
                                executionTo,
                                status,
                                maxPageSize,
                                this.client.getApiVersion(),
                                testId,
                                accept,
                                context));
    }

    /**
     * Get all test runs with given filters.
     *
     * @param orderBy Sort on one of the field - status, displayName, executedDateTime in (field asc/desc) format. eg:
     *     displayName asc.
     * @param continuationToken Continuation token to get the next page of response.
     * @param search Filter search based on searchable fields - description, executedUser.
     * @param executionFrom The end DateTime(ISO 8601 literal format) of test-run execution time filter range.
     * @param executionTo The start DateTime(ISO 8601 literal format) of test-run execution time filter range.
     * @param status Comma separated list of test run status, value can be - "ACCEPTED",
     *     "NOTSTARTED","PROVISIONING","PROVISIONED","CONFIGURING",
     *     "CONFIGURED","EXECUTING","EXECUTED","DEPROVISIONING","DEPROVISIONED","DONE","CANCELLED","FAILED".
     * @param maxPageSize Number of results in response.
     * @param testId Unique name for load test, must be a valid URL character ^[a-z0-9_-]*$.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseBodyException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all test runs with given filters along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<TestRunModelResourceList>> listTestRunsSearchWithResponseAsync(
            String orderBy,
            String continuationToken,
            String search,
            OffsetDateTime executionFrom,
            OffsetDateTime executionTo,
            String status,
            Integer maxPageSize,
            String testId,
            Context context) {
        final String accept = "application/json";
        return service.listTestRunsSearch(
                this.client.getEndpoint(),
                orderBy,
                continuationToken,
                search,
                executionFrom,
                executionTo,
                status,
                maxPageSize,
                this.client.getApiVersion(),
                testId,
                accept,
                context);
    }

    /**
     * Get all test runs with given filters.
     *
     * @param orderBy Sort on one of the field - status, displayName, executedDateTime in (field asc/desc) format. eg:
     *     displayName asc.
     * @param continuationToken Continuation token to get the next page of response.
     * @param search Filter search based on searchable fields - description, executedUser.
     * @param executionFrom The end DateTime(ISO 8601 literal format) of test-run execution time filter range.
     * @param executionTo The start DateTime(ISO 8601 literal format) of test-run execution time filter range.
     * @param status Comma separated list of test run status, value can be - "ACCEPTED",
     *     "NOTSTARTED","PROVISIONING","PROVISIONED","CONFIGURING",
     *     "CONFIGURED","EXECUTING","EXECUTED","DEPROVISIONING","DEPROVISIONED","DONE","CANCELLED","FAILED".
     * @param maxPageSize Number of results in response.
     * @param testId Unique name for load test, must be a valid URL character ^[a-z0-9_-]*$.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseBodyException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all test runs with given filters on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<TestRunModelResourceList> listTestRunsSearchAsync(
            String orderBy,
            String continuationToken,
            String search,
            OffsetDateTime executionFrom,
            OffsetDateTime executionTo,
            String status,
            Integer maxPageSize,
            String testId) {
        return listTestRunsSearchWithResponseAsync(
                        orderBy, continuationToken, search, executionFrom, executionTo, status, maxPageSize, testId)
                .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Get all test runs with given filters.
     *
     * @param orderBy Sort on one of the field - status, displayName, executedDateTime in (field asc/desc) format. eg:
     *     displayName asc.
     * @param continuationToken Continuation token to get the next page of response.
     * @param search Filter search based on searchable fields - description, executedUser.
     * @param executionFrom The end DateTime(ISO 8601 literal format) of test-run execution time filter range.
     * @param executionTo The start DateTime(ISO 8601 literal format) of test-run execution time filter range.
     * @param status Comma separated list of test run status, value can be - "ACCEPTED",
     *     "NOTSTARTED","PROVISIONING","PROVISIONED","CONFIGURING",
     *     "CONFIGURED","EXECUTING","EXECUTED","DEPROVISIONING","DEPROVISIONED","DONE","CANCELLED","FAILED".
     * @param maxPageSize Number of results in response.
     * @param testId Unique name for load test, must be a valid URL character ^[a-z0-9_-]*$.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseBodyException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all test runs with given filters on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<TestRunModelResourceList> listTestRunsSearchAsync(
            String orderBy,
            String continuationToken,
            String search,
            OffsetDateTime executionFrom,
            OffsetDateTime executionTo,
            String status,
            Integer maxPageSize,
            String testId,
            Context context) {
        return listTestRunsSearchWithResponseAsync(
                        orderBy,
                        continuationToken,
                        search,
                        executionFrom,
                        executionTo,
                        status,
                        maxPageSize,
                        testId,
                        context)
                .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Get all test runs with given filters.
     *
     * @param orderBy Sort on one of the field - status, displayName, executedDateTime in (field asc/desc) format. eg:
     *     displayName asc.
     * @param continuationToken Continuation token to get the next page of response.
     * @param search Filter search based on searchable fields - description, executedUser.
     * @param executionFrom The end DateTime(ISO 8601 literal format) of test-run execution time filter range.
     * @param executionTo The start DateTime(ISO 8601 literal format) of test-run execution time filter range.
     * @param status Comma separated list of test run status, value can be - "ACCEPTED",
     *     "NOTSTARTED","PROVISIONING","PROVISIONED","CONFIGURING",
     *     "CONFIGURED","EXECUTING","EXECUTED","DEPROVISIONING","DEPROVISIONED","DONE","CANCELLED","FAILED".
     * @param maxPageSize Number of results in response.
     * @param testId Unique name for load test, must be a valid URL character ^[a-z0-9_-]*$.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseBodyException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all test runs with given filters.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public TestRunModelResourceList listTestRunsSearch(
            String orderBy,
            String continuationToken,
            String search,
            OffsetDateTime executionFrom,
            OffsetDateTime executionTo,
            String status,
            Integer maxPageSize,
            String testId) {
        return listTestRunsSearchAsync(
                        orderBy, continuationToken, search, executionFrom, executionTo, status, maxPageSize, testId)
                .block();
    }

    /**
     * Get all test runs with given filters.
     *
     * @param orderBy Sort on one of the field - status, displayName, executedDateTime in (field asc/desc) format. eg:
     *     displayName asc.
     * @param continuationToken Continuation token to get the next page of response.
     * @param search Filter search based on searchable fields - description, executedUser.
     * @param executionFrom The end DateTime(ISO 8601 literal format) of test-run execution time filter range.
     * @param executionTo The start DateTime(ISO 8601 literal format) of test-run execution time filter range.
     * @param status Comma separated list of test run status, value can be - "ACCEPTED",
     *     "NOTSTARTED","PROVISIONING","PROVISIONED","CONFIGURING",
     *     "CONFIGURED","EXECUTING","EXECUTED","DEPROVISIONING","DEPROVISIONED","DONE","CANCELLED","FAILED".
     * @param maxPageSize Number of results in response.
     * @param testId Unique name for load test, must be a valid URL character ^[a-z0-9_-]*$.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseBodyException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all test runs with given filters along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<TestRunModelResourceList> listTestRunsSearchWithResponse(
            String orderBy,
            String continuationToken,
            String search,
            OffsetDateTime executionFrom,
            OffsetDateTime executionTo,
            String status,
            Integer maxPageSize,
            String testId,
            Context context) {
        return listTestRunsSearchWithResponseAsync(
                        orderBy,
                        continuationToken,
                        search,
                        executionFrom,
                        executionTo,
                        status,
                        maxPageSize,
                        testId,
                        context)
                .block();
    }

    /**
     * Stop test run by name.
     *
     * @param testRunId Unique name of the load test run, must be a valid URL character ^[a-z0-9_-]*$.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseBodyException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return load test run model along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<TestRunModel>> stopTestRunWithResponseAsync(String testRunId) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.stopTestRun(
                                this.client.getEndpoint(), testRunId, this.client.getApiVersion(), accept, context));
    }

    /**
     * Stop test run by name.
     *
     * @param testRunId Unique name of the load test run, must be a valid URL character ^[a-z0-9_-]*$.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseBodyException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return load test run model along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<TestRunModel>> stopTestRunWithResponseAsync(String testRunId, Context context) {
        final String accept = "application/json";
        return service.stopTestRun(this.client.getEndpoint(), testRunId, this.client.getApiVersion(), accept, context);
    }

    /**
     * Stop test run by name.
     *
     * @param testRunId Unique name of the load test run, must be a valid URL character ^[a-z0-9_-]*$.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseBodyException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return load test run model on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<TestRunModel> stopTestRunAsync(String testRunId) {
        return stopTestRunWithResponseAsync(testRunId).flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Stop test run by name.
     *
     * @param testRunId Unique name of the load test run, must be a valid URL character ^[a-z0-9_-]*$.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseBodyException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return load test run model on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<TestRunModel> stopTestRunAsync(String testRunId, Context context) {
        return stopTestRunWithResponseAsync(testRunId, context).flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Stop test run by name.
     *
     * @param testRunId Unique name of the load test run, must be a valid URL character ^[a-z0-9_-]*$.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseBodyException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return load test run model.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public TestRunModel stopTestRun(String testRunId) {
        return stopTestRunAsync(testRunId).block();
    }

    /**
     * Stop test run by name.
     *
     * @param testRunId Unique name of the load test run, must be a valid URL character ^[a-z0-9_-]*$.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseBodyException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return load test run model along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<TestRunModel> stopTestRunWithResponse(String testRunId, Context context) {
        return stopTestRunWithResponseAsync(testRunId, context).block();
    }

    /**
     * Get all client metrics for a load test run.
     *
     * @param testRunId Unique name of the load test run, must be a valid URL character ^[a-z0-9_-]*$.
     * @param body Client metrics request model.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseBodyException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all client metrics for a load test run along with {@link Response} on successful completion of {@link
     *     Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<ClientMetricsResults>> getTestRunClientMetricsWithResponseAsync(
            String testRunId, ClientMetricsRequestModel body) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.getTestRunClientMetrics(
                                this.client.getEndpoint(),
                                testRunId,
                                this.client.getApiVersion(),
                                body,
                                accept,
                                context));
    }

    /**
     * Get all client metrics for a load test run.
     *
     * @param testRunId Unique name of the load test run, must be a valid URL character ^[a-z0-9_-]*$.
     * @param body Client metrics request model.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseBodyException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all client metrics for a load test run along with {@link Response} on successful completion of {@link
     *     Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<ClientMetricsResults>> getTestRunClientMetricsWithResponseAsync(
            String testRunId, ClientMetricsRequestModel body, Context context) {
        final String accept = "application/json";
        return service.getTestRunClientMetrics(
                this.client.getEndpoint(), testRunId, this.client.getApiVersion(), body, accept, context);
    }

    /**
     * Get all client metrics for a load test run.
     *
     * @param testRunId Unique name of the load test run, must be a valid URL character ^[a-z0-9_-]*$.
     * @param body Client metrics request model.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseBodyException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all client metrics for a load test run on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ClientMetricsResults> getTestRunClientMetricsAsync(String testRunId, ClientMetricsRequestModel body) {
        return getTestRunClientMetricsWithResponseAsync(testRunId, body)
                .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Get all client metrics for a load test run.
     *
     * @param testRunId Unique name of the load test run, must be a valid URL character ^[a-z0-9_-]*$.
     * @param body Client metrics request model.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseBodyException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all client metrics for a load test run on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ClientMetricsResults> getTestRunClientMetricsAsync(
            String testRunId, ClientMetricsRequestModel body, Context context) {
        return getTestRunClientMetricsWithResponseAsync(testRunId, body, context)
                .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Get all client metrics for a load test run.
     *
     * @param testRunId Unique name of the load test run, must be a valid URL character ^[a-z0-9_-]*$.
     * @param body Client metrics request model.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseBodyException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all client metrics for a load test run.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ClientMetricsResults getTestRunClientMetrics(String testRunId, ClientMetricsRequestModel body) {
        return getTestRunClientMetricsAsync(testRunId, body).block();
    }

    /**
     * Get all client metrics for a load test run.
     *
     * @param testRunId Unique name of the load test run, must be a valid URL character ^[a-z0-9_-]*$.
     * @param body Client metrics request model.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseBodyException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all client metrics for a load test run along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<ClientMetricsResults> getTestRunClientMetricsWithResponse(
            String testRunId, ClientMetricsRequestModel body, Context context) {
        return getTestRunClientMetricsWithResponseAsync(testRunId, body, context).block();
    }

    /**
     * Get all filters that are supported for client metrics for a given load test run.
     *
     * @param testRunId Unique name for load test run, must be a valid URL character ^[a-z0-9_-]*$.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseBodyException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all filters that are supported for client metrics for a given load test run along with {@link Response}
     *     on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<ClientMetricsFilters>> getTestRunClientMetricsFiltersWithResponseAsync(String testRunId) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.getTestRunClientMetricsFilters(
                                this.client.getEndpoint(), testRunId, this.client.getApiVersion(), accept, context));
    }

    /**
     * Get all filters that are supported for client metrics for a given load test run.
     *
     * @param testRunId Unique name for load test run, must be a valid URL character ^[a-z0-9_-]*$.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseBodyException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all filters that are supported for client metrics for a given load test run along with {@link Response}
     *     on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<ClientMetricsFilters>> getTestRunClientMetricsFiltersWithResponseAsync(
            String testRunId, Context context) {
        final String accept = "application/json";
        return service.getTestRunClientMetricsFilters(
                this.client.getEndpoint(), testRunId, this.client.getApiVersion(), accept, context);
    }

    /**
     * Get all filters that are supported for client metrics for a given load test run.
     *
     * @param testRunId Unique name for load test run, must be a valid URL character ^[a-z0-9_-]*$.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseBodyException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all filters that are supported for client metrics for a given load test run on successful completion of
     *     {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ClientMetricsFilters> getTestRunClientMetricsFiltersAsync(String testRunId) {
        return getTestRunClientMetricsFiltersWithResponseAsync(testRunId)
                .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Get all filters that are supported for client metrics for a given load test run.
     *
     * @param testRunId Unique name for load test run, must be a valid URL character ^[a-z0-9_-]*$.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseBodyException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all filters that are supported for client metrics for a given load test run on successful completion of
     *     {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ClientMetricsFilters> getTestRunClientMetricsFiltersAsync(String testRunId, Context context) {
        return getTestRunClientMetricsFiltersWithResponseAsync(testRunId, context)
                .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Get all filters that are supported for client metrics for a given load test run.
     *
     * @param testRunId Unique name for load test run, must be a valid URL character ^[a-z0-9_-]*$.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseBodyException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all filters that are supported for client metrics for a given load test run.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ClientMetricsFilters getTestRunClientMetricsFilters(String testRunId) {
        return getTestRunClientMetricsFiltersAsync(testRunId).block();
    }

    /**
     * Get all filters that are supported for client metrics for a given load test run.
     *
     * @param testRunId Unique name for load test run, must be a valid URL character ^[a-z0-9_-]*$.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseBodyException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all filters that are supported for client metrics for a given load test run along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<ClientMetricsFilters> getTestRunClientMetricsFiltersWithResponse(
            String testRunId, Context context) {
        return getTestRunClientMetricsFiltersWithResponseAsync(testRunId, context).block();
    }
}
